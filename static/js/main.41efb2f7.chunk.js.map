{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","BACKG","PHRASES","AUTHORS","App","props","state","bc","phrase","author","hClick","bind","a","indexOf","this","length","b","setState","style","backgroundColor","color","position","top","left","width","height","display","justifyContent","alignItems","minHeight","button","borderColor","tw","TransitionGroup","CSSTransition","key","timeout","classNames","in","appear","id","padding","textAlign","borderRadius","verticalAlign","className","onClick","href","target","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,4KCKrCC,EAAQ,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UACnD,UAAU,UAAW,UAAU,UAAU,UAAU,UACnD,UAAU,UAAU,WAC5BC,EAAU,CAAC,4FACD,4DACA,oKACA,uIACA,4DACA,2EACA,yEACA,+CACA,uFACA,6CACA,sFACA,yFACA,yEACA,mEACA,gEACVC,EAAU,CAAC,iBACD,cACA,aACA,gBACA,cACA,gBACA,oBACA,aACA,kBACA,iBACA,iBACA,uBACA,aACA,0BACA,oBA4EDC,E,kDA1Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CAACC,GAAIN,EAAM,GACVO,OAAQN,EAAQ,GAChBO,OAAQN,EAAQ,IAC5B,EAAKO,OAAS,EAAKA,OAAOC,KAAZ,gBALE,E,qDAQhB,IAAIC,EAAIX,EAAMY,QAAQC,KAAKR,MAAMC,IAC9BK,GAAKX,EAAMc,OAAS,EACrBH,EAAI,EAEJA,GAAK,EAEP,IAAII,EAAId,EAAQW,QAAQC,KAAKR,MAAME,QAChCQ,GAAKd,EAAQa,OAAS,EACvBC,EAAI,EAGJA,GAAK,EAEPF,KAAKG,SAAS,CACZV,GAAIN,EAAMW,GACVJ,OAAQN,EAAQc,GAChBP,OAAQN,EAAQa,O,+BAIlB,IAAIE,EAAQ,CACVC,gBAAiBL,KAAKR,MAAMC,GAC5Ba,MAAMN,KAAKR,MAAMC,GACjBc,SAAS,QACTC,IAAI,IACJC,KAAK,IACLC,MAAM,OACNC,OAAO,OACPC,QAAQ,OACRC,eAAe,SACfC,WAAW,SACXC,UAAU,SAURC,EAAS,CACXX,gBAAgBL,KAAKR,MAAMC,GAC3BwB,YAAYjB,KAAKR,MAAMC,IAErByB,EAAK,CAACb,gBAAiBL,KAAKR,MAAMC,IACtC,OACE,kBAAC0B,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAeC,IAAKrB,KAAKR,MAAMG,OAAQ2B,QAAS,IAAKC,WAAW,QAChE,yBAAKnB,MAAOA,GACZ,kBAACgB,EAAA,EAAD,CAAeI,IAAI,EAAMC,QAAQ,EAAMH,QAAS,IAAKC,WAAW,QAChE,gCAAYG,GAAG,YAAYtB,MAlBpB,CACPC,gBAAgB,QAChBsB,QAAS,cACTC,UAAU,SACVC,aAAa,QACbC,cAAc,SACdpB,MAAM,UAaJ,yBAAKgB,GAAK,OAAOK,UAAU,SAAS/B,KAAKR,MAAME,QAC/C,yBAAKgC,GAAK,UAAV,KAAsB1B,KAAKR,MAAMG,QACjC,yBAAKoC,UAAU,QACf,4BAAQL,GAAG,YAAYM,QAAShC,KAAKJ,OAAQQ,MAAOY,GAApD,aACA,uBAAGiB,KAAI,gDAA2CjC,KAAKR,MAAME,OAAtD,cAAkEM,KAAKR,MAAMG,QAAU+B,GAAG,cAAcQ,OAAO,SAAS9B,MAAOc,GAAI,uBAAGiB,MAAM,8B,GAjEzIC,IAAMC,WC1BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41efb2f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nconst BACKG = [\"#00D893\",\"#00004D\",\"#A7008C\",\"#830000\",\"#D19200\",\"#640099\",\n              \"#FF27C4\",\"#040044\", \"#2FAB9F\",\"#8DAB9F\",\"#8DAB00\",\"#511836\",\n              \"#4f1d27\",\"#be8540\",\"#a3b2c7\"];\nconst PHRASES = [\"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n                \"The way to get started is to quit talking and begin doing\",\n                \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma â€“ which is living with the results of other people's thinking.\",\n                \"If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.\",\n                \"Life is what happens when you're busy making other plans.\",\n                \"Always remember that you are absolutely unique. Just like everyone else.\",\n                \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\",\n                \"Whoever is happy will make others happy too.\",\n                \"In the end, it's not the years in your life that count. It's the life in your years.\",\n                \"Life is ours to be spent, not to be saved.\",\n                \"Keep smiling, because life is a beautiful thing and there's so much to smile about.\",\n                \"Success is not final; failure is not fatal: It is the courage to continue that counts.\",\n                \"If you really look closely, most overnight successes took a long time.\",\n                \"The secret of success is to do the common thing uncommonly well.\",\n                \"I find that the harder I work, the more luck I seem to have.\"];\nconst AUTHORS = [\"Nelson Mandela\",\n                \"Walt Disney\",\n                \"Steve Jobs\",\n                \"Oprah Winfrey\",\n                \"John Lennon\",\n                \"Margaret Mead\",\n                \"Benjamin Franklin\",\n                \"Anne Frank\",\n                \"Abraham Lincoln\",\n                \"D. H. Lawrence\",\n                \"Marilyn Monroe\",\n                \"Winston S. Churchill\",\n                \"Steve Jobs\",\n                \"John D. Rockefeller Jr.\",\n                \"Thomas Jefferson\"];\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={bc: BACKG[0],\n                phrase: PHRASES[0],\n                author: AUTHORS[0]};\n    this.hClick = this.hClick.bind(this);\n  }\n  hClick(){\n    let a = BACKG.indexOf(this.state.bc);\n    if(a == BACKG.length - 1){\n      a = 0;\n    }else{\n      a += 1;\n    }\n    let b = PHRASES.indexOf(this.state.phrase);\n    if(b == PHRASES.length - 1){\n      b = 0;\n    }\n    else{\n      b += 1;\n    }\n    this.setState({\n      bc: BACKG[a],\n      phrase: PHRASES[b],\n      author: AUTHORS[b]\n    });\n  }\n  render(){\n    let style = {\n      backgroundColor: this.state.bc,\n      color:this.state.bc,\n      position:\"fixed\",\n      top:\"0\",\n      left:\"0\",\n      width:\"100%\",\n      height:\"100%\",\n      display:\"flex\",\n      justifyContent:\"center\",\n      alignItems:\"center\",\n      minHeight:\"550px\"\n      };\n    let qb = {\n      backgroundColor:\"white\",\n      padding: \"2% 2% 2% 2%\",\n      textAlign:\"center\",\n      borderRadius:\"0.5em\",\n      verticalAlign:\"center\",\n      width:\"500px\"\n      };\n    let button = {\n      backgroundColor:this.state.bc,\n      borderColor:this.state.bc,\n    }\n    let tw = {backgroundColor: this.state.bc};\n    return (\n      <TransitionGroup>\n      <CSSTransition key={this.state.author} timeout={600} classNames=\"fade\">\n      <div style={style}>\n      <CSSTransition in={true} appear={true} timeout={600} classNames=\"fade\">\n      <blockquote id=\"quote-box\" style={qb}>\n        <div id = \"text\" className=\"slide\">{this.state.phrase}</div>\n        <div id = \"author\">- {this.state.author}</div>\n        <div className=\"gege\">\n        <button id=\"new-quote\" onClick={this.hClick} style={button}>New Quote</button>\n        <a href={`https://twitter.com/intent/tweet?text=${this.state.phrase}---${this.state.author}`} id=\"tweet-quote\" target=\"_blank\" style={tw}><i class=\"fab fa-twitter\"></i></a>\n        </div>\n      </blockquote>\n      </CSSTransition>\n      </div>\n      </CSSTransition>\n      </TransitionGroup>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}